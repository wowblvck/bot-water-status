require("dotenv").config();
const TelegramApi = require("node-telegram-bot-api");
const BotOptions = require("./config/botOptions");
const CommandList = require("./config/commands");
const commandToRegex = require("./utils/utils");

const TOKEN = process.env.TELEGRAM_TOKEN;

const bot = new TelegramApi(TOKEN, BotOptions);

const start = () => {
  bot.setMyCommands([
    { command: `${CommandList.start}`, description: "–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ" },
    { command: `${CommandList.waterOn}`, description: "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–æ–¥—ã –Ω–∞ '–í–∫–ª—é—á–µ–Ω–æ'" },
    { command: `${CommandList.waterOff}`, description: "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–æ–¥—ã –Ω–∞ '–í—ã–∫–ª—é—á–µ–Ω–æ'" },
    { command: `${CommandList.waterStatus}`, description: "–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–æ–¥—ã" },
  ]);

  bot.onText(commandToRegex(CommandList.start), async (msg) => {
    const chatId = msg.chat.id;
    await bot.sendSticker(
      chatId,
      "https://tlgrm.ru/_/stickers/a03/378/a03378c3-122f-314c-9f3f-c03ec9f00561/1.jpg",
    )
    await bot.sendMessage(
      chatId, 
      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ü´°. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–æ–¥—ã üí¶ –≤ —Å–≤–æ–µ–º –∂–∏–ª–∏—â–µ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.\n\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:"
    );
  });

  bot.onText(commandToRegex(CommandList.waterOn), async(msg) => {
    const chatId = msg.chat.id;
    await bot.sendMessage(
      chatId,
      "–í—ã <i><b>–í–∫–ª—é—á–∏–ª–∏</b></i> üí¶ –∏ –∏–∑–º–µ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å!",
      {
        parse_mode: "HTML",
      }
    );
  })
  
  //Check command is undefined
  bot.on("message", async (msg) => {
    const text = msg.text;
    const chatId = msg.chat.id;
    if (!Object.values(CommandList).includes(text)) {
      await bot.sendMessage(
        chatId,
        `–ö–æ–º–∞–Ω–¥–∞ <b>${msg.text}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`,
        {
          parse_mode: "HTML"
        }
      );
    }
  });
}

start();
